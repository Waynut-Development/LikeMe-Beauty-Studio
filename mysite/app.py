import sqlite3
from flask import Flask, render_template, url_for, redirect, request, jsonify
from config import send_telegram_message

app = Flask(__name__)

DB = "beauty.db"

# ---------------------- –†–∞–±–æ—Ç–∞ —Å –ë–î ----------------------
def get_db_connection():
    conn = sqlite3.connect(DB)
    conn.row_factory = sqlite3.Row
    return conn

# ---------------------- –ú–∞—Ä—à—Ä—É—Ç—ã ----------------------

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return render_template('index.html')


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–∏–º–µ—Ä)
@app.route('/success', methods=["GET", 'POST'])
def success():
    return render_template('booking.html')

@app.route("/admin")
def admin():
    return render_template("admin_panel.html")


# # –û –Ω–∞—Å
# @app.route("/about", methods=["POST"])
# def about():
#     return render_template("sidebar_1_about_us.html")

# # –£—Å–ª—É–≥–∏
# @app.route("/services", methods=["POST"])
# def services():
#     return render_template("sidebar_2_services.html")

# # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç
# @app.route("/examples", methods=["POST"])
# def examples():
#     return render_template("sidebar_3_examples_of_work.html")

# # –ö–æ–Ω—Ç–∞–∫—Ç—ã
# @app.route("/contacts", methods=["POST"])
# def contacts():
#     return render_template("sidebar_4_contacts.html")

# –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å
@app.route("/canceling_rescheduling", methods=["POST"])
def canceling_rescheduling():
    return render_template("canceling or rescheduling.html")

# –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@app.route("/canceling", methods=["POST"])
def canceling():
    return render_template("canceling.html")

# –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏
@app.route("/rescheduling", methods=["POST"])
def rescheduling():
    return render_template("rescheduling.html")



# ---------- –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã ----------
@app.route("/free_slots/<date>")
def free_slots(date):
    conn = get_db_connection()
    rows = conn.execute(
        "SELECT time FROM schedule WHERE date=? AND status='free' ORDER BY time",
        (date,)
    ).fetchall()
    conn.close()
    return jsonify([row["time"] for row in rows])

# ---------- –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ ----------
@app.route("/book", methods=["GET", "POST"])
def book():
    name = request.form.get("name")
    phone = request.form.get("phone")
    service = request.form.get("service")
    date = request.form.get("date")
    time = request.form.get("time")

    conn = get_db_connection()
    conn.execute(
        "INSERT INTO appointments (name, phone, service, date, time) VALUES (?, ?, ?, ?, ?)",
        (name, phone, service, date, time)
    )
    conn.execute(
        "UPDATE schedule SET status='busy' WHERE date=? AND time=?",
        (date, time)
    )
    conn.commit()
    conn.close()

    # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    message = (
        f"üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {time}"
    )
    send_telegram_message(message)

    return redirect(url_for("success"))

# ---------- –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ ----------
@app.route("/cancel", methods=["POST"])
def cancel():
    name = request.form.get("name")
    phone = request.form.get("phone")
    service = request.form.get("service")
    date = request.form.get("date")

    conn = get_db_connection()

    # –∏—â–µ–º –∑–∞–ø–∏—Å—å
    appointment = conn.execute(
        "SELECT * FROM appointments WHERE name=? AND phone=? AND service=? AND date=?",
        (name, phone, service, date)
    ).fetchone()

    if not appointment:
        conn.close()
        return jsonify({"error": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
    conn.execute(
        "UPDATE schedule SET status='free' WHERE date=? AND time=?",
        (appointment["date"], appointment["time"])
    )

    # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    conn.execute("DELETE FROM appointments WHERE id=?", (appointment["id"],))
    conn.commit()
    conn.close()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    message = (
        f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–î–∞—Ç–∞: {date}"
    )
    send_telegram_message(message)

    return render_template("canceling.html", success=True)


# ---------- –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏ ----------
@app.route("/reschedule", methods=["POST"])
def reschedule():
    name = request.form.get("name")
    phone = request.form.get("phone")
    service = request.form.get("service")
    old_date = request.form.get("old_date")
    old_time = request.form.get("old_time")
    new_date = request.form.get("date")
    new_time = request.form.get("time")

    conn = get_db_connection()

    # –∏—â–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
    appointment = conn.execute(
        "SELECT * FROM appointments WHERE name=? AND phone=? AND service=? AND date=? AND time=?",
        (name, phone, service, old_date, old_time)
    ).fetchone()

    if not appointment:
        conn.close()
        return jsonify({"error": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    # –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
    conn.execute(
        "UPDATE schedule SET status='free' WHERE date=? AND time=?",
        (old_date, old_time)
    )

    # –∑–∞–Ω—è—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ—Ç
    conn.execute(
        "UPDATE schedule SET status='busy' WHERE date=? AND time=?",
        (new_date, new_time)
    )

    # –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    conn.execute(
        "UPDATE appointments SET date=?, time=? WHERE id=?",
        (new_date, new_time, appointment["id"])
    )

    conn.commit()
    conn.close()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    message = (
        f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–° {old_date} {old_time}\n"
        f"–ù–∞ {new_date} {new_time}"
    )
    send_telegram_message(message)

    return render_template("rescheduling.html", success=True)


# ---------- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (API –¥–ª—è –∞–¥–º–∏–Ω–∫–∏) ----------
@app.route("/schedule", methods=["GET"])
def get_schedule():
    conn = get_db_connection()
    rows = conn.execute("SELECT * FROM schedule").fetchall()
    conn.close()
    return jsonify([dict(row) for row in rows])

@app.route("/schedule", methods=["POST"])
def save_schedule():
    data = request.get_json()
    if not data:
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

    conn = get_db_connection()
    for cell in data:
        conn.execute(
            """
            INSERT INTO schedule (date, time, status)
            VALUES (?, ?, ?)
            ON CONFLICT(date, time) DO UPDATE SET status=excluded.status
            """,
            (cell["date"], cell["time"], cell["status"])
        )
    conn.commit()
    conn.close()
    return jsonify({"message": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"})


# ---------------------- –ó–∞–ø—É—Å–∫ ----------------------
if __name__ == '__main__':
    app.run(debug=True)